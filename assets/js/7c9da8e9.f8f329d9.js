"use strict";(self.webpackChunkaws_bedrock_mongodb_atlas_workshop=self.webpackChunkaws_bedrock_mongodb_atlas_workshop||[]).push([[427],{5030:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var t=s(5893),r=s(1151),c=s(9524);const o={sidebar_position:2},i="Create Values & Secrets",a={id:"app-services/create-app-components",title:"Create Values & Secrets",description:"We will use the app services to create a Value and a Secret for AWS access and secret keys to access our Bedrock modules.",source:"@site/docs/3-app-services/create-app-components.mdx",sourceDirName:"3-app-services",slug:"/app-services/create-app-components",permalink:"/atlas-bedrock-crime-story-workshop/docs/app-services/create-app-components",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/atlas-bedrock-crime-story-workshop/blob/main/docs/3-app-services/create-app-components.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Create an Atlas App Services application",permalink:"/atlas-bedrock-crime-story-workshop/docs/app-services/create-app-services"},next:{title:"Setup the backend logic",permalink:"/atlas-bedrock-crime-story-workshop/docs/app-services/create-app-webhook"}},d={},l=[{value:"Add aws sdk dependency",id:"add-aws-sdk-dependency",level:2},{value:"Create an Atlas trigger",id:"create-an-atlas-trigger",level:2},{value:"Trigger code",id:"trigger-code",level:3}];function h(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"create-values--secrets",children:"Create Values & Secrets"}),"\n",(0,t.jsxs)(n.p,{children:["We will use the app services to create a ",(0,t.jsx)(n.strong,{children:"Value"})," and a ",(0,t.jsx)(n.strong,{children:"Secret"})," for AWS access and secret keys to access our Bedrock modules."]}),"\n",(0,t.jsxs)(n.p,{children:["Navigate to the ",(0,t.jsx)(n.strong,{children:"Values"})," section and click ",(0,t.jsx)(n.strong,{children:"Create New Value"})," by following this configuration:"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Secrets"})}),"\n",(0,t.jsx)("hr",{}),"\n",(0,t.jsx)(n.p,{children:'Input the following values with "Secret" type selected.'}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Name"}),":"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"AWS_ACCESS_KEY\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Value"}),":"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"<YOUR AWS ACCESS KEY>\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Name"}),":"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"AWS_SECRET_KEY\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Value"}),":"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"<YOUR AWS SECRET>\n"})}),"\n",(0,t.jsx)("hr",{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Values"})}),"\n",(0,t.jsx)("hr",{}),"\n",(0,t.jsx)(n.p,{children:"Repeat the process to link the secrets to fetchable values."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Name"}),":"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"AWS_ACCESS_KEY\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Link to SECRET"})," : ",(0,t.jsx)(n.code,{children:"AWS_ACCESS_KEY"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Name"}),":"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"AWS_SECRET_KEY\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Link to SECRET"})," : ",(0,t.jsx)(n.code,{children:"AWS_SECRET_KEY"})]}),"\n"]}),"\n",(0,t.jsx)("hr",{}),"\n",(0,t.jsx)("img",{alt:"Values and Secrets",src:(0,c.Z)("/img/chapter-2-app-services/valuesSecret.png"),width:"400",border:"1"}),"\n",(0,t.jsx)(n.p,{children:'Once done press "Review Draft & Deploy" and then "Deploy".'}),"\n",(0,t.jsx)(n.h2,{id:"add-aws-sdk-dependency",children:"Add aws sdk dependency"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:'In your app services application navigate to "Functions" tab and click "Dependencies" tab.'}),"\n",(0,t.jsx)(n.li,{children:'Click "Add Dependency" and add the following dependency:'}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"@aws-sdk/client-bedrock-runtime\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:'Click "Add" and wait for it to be sucessfully added.'}),"\n",(0,t.jsx)(n.li,{children:'Once done press "Review Draft & Deploy" and then "Deploy".'}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"create-an-atlas-trigger",children:"Create an Atlas trigger"}),"\n",(0,t.jsx)(n.p,{children:"Since we want our embedding to be dynamic, we will use a trigger to join the data from the two sources and write it to a collection in our Atlas cluster."}),"\n",(0,t.jsxs)(n.p,{children:['Navigate to the "Triggers" tab and click ',(0,t.jsx)(n.strong,{children:"Add a Trigger"})," by following this configuration:"]}),"\n",(0,t.jsx)("img",{alt:"Trigger Setup",src:(0,c.Z)("/img/chapter-2-app-services/bedrockTrigger.png")}),"\n",(0,t.jsx)(n.h3,{id:"trigger-code",children:"Trigger code"}),"\n",(0,t.jsxs)(n.p,{children:["Choose ",(0,t.jsx)(n.strong,{children:"Function"})," type and in the dropdown click ",(0,t.jsx)(n.strong,{children:"New Function"}),". Add a name like ",(0,t.jsx)(n.code,{children:"setEmbeddings"})," under ",(0,t.jsx)(n.strong,{children:"Function Name"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Copy paste the following code."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Header: MongoDB Atlas Function to Process Document Changes\n// Inputs: MongoDB changeEvent object\n// Outputs: Updates the MongoDB document with processing status and AWS model response\n\nexports = async function(changeEvent) {\n  // Connect to MongoDB service\n  var serviceName = \"mongodb-atlas\";\n  var dbName = changeEvent.ns.db;\n  var collName = changeEvent.ns.coll;\n\n  try {\n    var collection = context.services.get(serviceName).db(dbName).collection(collName);\n\n    // Set document status to 'pending'\n    await collection.updateOne({'_id' : changeEvent.fullDocument._id}, {$set : {processing : 'pending'}});\n\n    // AWS SDK setup for invoking models\n    const { BedrockRuntimeClient, InvokeModelCommand } = require(\"@aws-sdk/client-bedrock-runtime\"); \n    const client = new BedrockRuntimeClient({\n      region: 'us-east-1',\n      credentials: {\n        accessKeyId:  context.values.get('AWS_ACCESS_KEY'), \n        secretAccessKey: context.values.get('AWS_SECRET_KEY')\n      },\n      model: \"amazon.titan-embed-text-v1\",\n    });\n\n    // Prepare embedding input from the change event\n    let embedInput = {}\n    if (changeEvent.fullDocument.details) {\n      embedInput['inputText'] = changeEvent.fullDocument.details\n    }\n    if (changeEvent.fullDocument.imgUrl) {\n      const imageResponse = await context.http.get({ url: changeEvent.fullDocument.imgUrl });\n      const imageBase64 = imageResponse.body.toBase64();\n      embedInput['inputImage'] = imageBase64\n    }\n\n    // AWS SDK call to process the embedding\n    const input = {\n      \"modelId\": \"amazon.titan-embed-image-v1\",\n      \"contentType\": \"application/json\",\n      \"accept\": \"*/*\",\n      \"body\": JSON.stringify(embedInput)\n    };\n\n    console.log(`before model invoke ${JSON.stringify(input)}`);\n    const command = new InvokeModelCommand(input);\n    const response = await client.send(command);\n      \n    // Parse and update the document with the response\n    const doc = JSON.parse(Buffer.from(response.body));\n    doc.processing = 'completed';\n    await collection.updateOne({'_id' : changeEvent.fullDocument._id}, {$set : doc});\n  \n  } catch(err) {\n    // Handle any errors in the process\n    console.error(err)\n  }\n};\n\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Save"})," + ",(0,t.jsx)(n.strong,{children:"Review Draft & Deploy"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Now we need to set the function ",(0,t.jsx)(n.strong,{children:"setEmbeddings"})," as a SYSTEM function. Click on the ",(0,t.jsx)(n.strong,{children:"Functions"})," tab and then click on the ",(0,t.jsx)(n.strong,{children:"setEmbeddings"})," function, ",(0,t.jsx)(n.strong,{children:"Settings"})," tab. Change the Authentication to ",(0,t.jsx)(n.strong,{children:"System"})," and click ",(0,t.jsx)(n.strong,{children:"Save"}),"."]}),"\n",(0,t.jsx)("img",{alt:"System Function",src:(0,c.Z)("/img/chapter-1-mongodb-atlas/httpEndpoint.png"),width:"700",border:"1"}),"\n",(0,t.jsxs)(n.p,{children:["A trigger running successfully will produce a collection in our Atlas cluster. You can navigate to ",(0,t.jsx)(n.strong,{children:"Data Services"})," > ",(0,t.jsx)(n.strong,{children:"Database"})," and  ",(0,t.jsx)(n.strong,{children:"Browse Collections"})," button on the cluster view, database name is ",(0,t.jsx)(n.code,{children:"Bedrock"})," and collection ",(0,t.jsx)(n.code,{children:"evidence"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)(n.em,{children:["Please note that the trigger run will only happen when we insert data into ",(0,t.jsx)(n.code,{children:"bedrock.evidence"})," collection and  might take a while the first time and therefore you can watch the ",(0,t.jsx)(n.strong,{children:"Logs"})," section on the App Services side"]}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>i,a:()=>o});var t=s(7294);const r={},c=t.createContext(r);function o(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);