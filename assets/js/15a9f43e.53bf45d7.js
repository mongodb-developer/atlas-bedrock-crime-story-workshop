"use strict";(self.webpackChunkaws_bedrock_mongodb_atlas_workshop=self.webpackChunkaws_bedrock_mongodb_atlas_workshop||[]).push([[5],{8107:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var r=a(5893),n=a(1151);a(9524);const s={sidebar_position:2},o="Atlas Search Query",c={id:"atlas-search/implement-atlas-search-query",title:"Atlas Search Query",description:"In this demo the Atlas search query is already implemented as part of the getSearch HTTP endpoint",source:"@site/docs/4-atlas-search/implement-atlas-search-query.mdx",sourceDirName:"4-atlas-search",slug:"/atlas-search/implement-atlas-search-query",permalink:"/atlas-bedrock-crime-story-workshop/docs/atlas-search/implement-atlas-search-query",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/atlas-bedrock-crime-story-workshop/blob/main/docs/4-atlas-search/implement-atlas-search-query.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Create Atlas Vector Search Index",permalink:"/atlas-bedrock-crime-story-workshop/docs/atlas-search/create-atlas-search-index"},next:{title:"Add atlas search vector index - Product Catalog",permalink:"/atlas-bedrock-crime-story-workshop/docs/category/add-atlas-search-vector-index---product-catalog"}},i={},d=[];function l(e){const t={admonition:"admonition",code:"code",h1:"h1",p:"p",pre:"pre",...(0,n.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"atlas-search-query",children:"Atlas Search Query"}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["In this demo the Atlas search query is already implemented as part of the ",(0,r.jsx)(t.code,{children:"getSearch"})," HTTP endpoint"]})}),"\n",(0,r.jsxs)(t.p,{children:["The HTTP endpoint ",(0,r.jsx)(t.code,{children:"getSearch"})," implemented in chapter 3 already includes a search query."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:'const evidence = await collection.aggregate([\n      {\n        "$vectorSearch": {\n          "queryVector": doc.embedding,\n          "index": "vector_index",\n          "path": "embedding",\n          "numCandidates": 1,\n          "limit": 1\n        }\n      },\n      {"$project": {"embedding": 0}}\n    ]).toArray();\n'})}),"\n",(0,r.jsx)(t.p,{children:'With this code we are performing a vector search with whatever is placed in the "doc.embedding" variable on fields "embedding".\nWe look for just 1 document results and limiting the set for the first one.'})]})}function h(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},1151:(e,t,a)=>{a.d(t,{Z:()=>c,a:()=>o});var r=a(7294);const n={},s=r.createContext(n);function o(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);